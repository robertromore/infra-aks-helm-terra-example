name: API

on:
  push:
    branches: [main, develop]
    paths: ["apps/api/**", "infrastructure/helm/api/**"]
  pull_request:
    branches: [main]
    paths: ["apps/api/**", "infrastructure/helm/api/**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testing
          POSTGRES_USER: laravel
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, intl, bcmath, pdo_pgsql
          coverage: xdebug

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('apps/api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          cd apps/api
          composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Create .env file
        run: |
          cd apps/api
          cp .env.testing .env
          php artisan key:generate

      - name: Run migrations
        run: |
          cd apps/api
          php artisan migrate --force

      - name: Run static analysis
        run: |
          cd apps/api
          composer run phpstan || true

      - name: Run tests
        run: |
          cd apps/api
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: api
          name: api-coverage
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: mbstring, intl, bcmath, pdo_pgsql

      - name: Install dependencies
        run: |
          cd apps/api
          composer install --no-dev --no-interaction

      - name: Run security audit
        run: |
          cd apps/api
          composer audit
        continue-on-error: true

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/api'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set environment
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "NAMESPACE=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "NAMESPACE=staging" >> $GITHUB_ENV
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group monorepo-rg --name monorepo-aks

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Deploy to AKS
        run: |
          cd ./infrastructure/helm/api
          helm dependency update
          cd ../../../
          helm upgrade --install api-${{ env.ENVIRONMENT }} \
            ./infrastructure/helm/api \
            --namespace ${{ env.NAMESPACE }} \
            --create-namespace \
            --values ./infrastructure/helm/api/values.yaml \
            $(if [ "${{ env.ENVIRONMENT }}" = "production" ]; then echo "--values ./infrastructure/helm/api/values-production.yaml"; fi) \
            --set image.tag=${{ github.sha }} \
            --timeout=10m \
            --wait

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-${{ env.ENVIRONMENT }} -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/name=api

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          # Get service URL and run basic health check
          kubectl get ingress -n ${{ env.NAMESPACE }}
          # Add actual smoke test commands here
        continue-on-error: true
